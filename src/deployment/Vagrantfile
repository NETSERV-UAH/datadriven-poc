# -*- mode: ruby -*-
# vi: set ft=ruby :
$out_file = File.new('debug.log', 'w')
def $stdout.write string
    log_datas=string
    if log_datas.gsub(/\r?\n/, "") != ''
        log_datas=::Time.now.strftime("%d/%m/%Y %T")+" "+log_datas.gsub(/\r\n/, "\n")
    end
    super log_datas
    $out_file.write log_datas
    $out_file.flush
end
def $stderr.write string
    log_datas=string
    if log_datas.gsub(/\r?\n/, "") != ''
        log_datas=::Time.now.strftime("%d/%m/%Y %T")+" "+log_datas.gsub(/\r\n/, "\n")
    end
    super log_datas
    $out_file.write log_datas
    $out_file.flush
end

Vagrant.configure("2") do |config|

  # Habilitar el x11
  config.ssh.forward_agent = true
  config.ssh.forward_x11 = true

  # Define las configuraciones para FactoryFloor
  config.vm.define "FactoryFloor" do |factory_config|
    factory_config.vm.box = "ubuntu/focal64"
    factory_config.vm.hostname = 'factory'
    factory_config.vm.network "private_network", ip: "192.168.56.11"
    factory_config.vm.provider "virtualbox" do |vb|
      vb.memory = 4096 # 2GB de RAM
      vb.cpus = 3      # 2 cores
    end
    # Ejecutar el script mininet-wifi/install.sh en FactoryFloor
    factory_config.vm.provision "shell", path: "mininet-wifi/install.sh"
    factory_config.vm.provision "file", source: "mininet-wifi/topo.py", destination: "/home/vagrant/topo.py"
    factory_config.vm.provision "shell", path: "iiot_sensor/install.sh"
    factory_config.vm.provision "file", source: "iiot_sensor/iiot_sensor.py", destination: "/home/vagrant/iiot_sensor.py"
  end

  # Define las configuraciones para Edge
  config.vm.define "Edge" do |edge_config|
    edge_config.vm.box = "ubuntu/focal64"
    edge_config.vm.hostname = 'edge'
    edge_config.vm.network "private_network", ip: "192.168.56.12"
    edge_config.vm.provider "virtualbox" do |vb|
      vb.memory = 2048 # 2GB de RAM
      vb.cpus = 2      # 2 cores
    end
    # Ejecutar el script ryu/install.sh en Edge y el de InfluxDB
    edge_config.vm.provision "shell", path: "ryu/install.sh"
    edge_config.vm.provision "shell", path: "influxdb/install.sh"
    edge_config.vm.provision "shell", path: "influxdb/config.sh"
  end

  # Define las configuraciones para Cloud
  config.vm.define "Cloud" do |cloud_config|
    cloud_config.vm.box = "ubuntu/focal64"
    cloud_config.vm.hostname = 'cloud'
    cloud_config.vm.network "private_network", ip: "192.168.56.13"
    cloud_config.vm.provider "virtualbox" do |vb|
      vb.memory = 2048 # 2GB de RAM
      vb.cpus = 2      # 2 cores
    end
    # Ejecutar el script grafana/install.sh en Cloud y el de BentoML
    cloud_config.vm.provision "shell", path: "grafana/install.sh"
    cloud_config.vm.provision "file", source: "bentoml/service.py", destination: "/home/vagrant/service.py"
    cloud_config.vm.provision "file", source: "bentoml/train.py", destination: "/home/vagrant/train.py"
    cloud_config.vm.provision "file", source: "bentoml/requirements.txt", destination: "/home/vagrant/requirements.txt"
    cloud_config.vm.provision "file", source: "bentoml/bentofile.yaml", destination: "/home/vagrant/bentofile.yaml"
    cloud_config.vm.provision "file", source: "bentoml/dataset/IIOT-temp-warn-max.csv", destination: "/home/vagrant/dataset/IIOT-temp-warn-max.csv"
    cloud_config.vm.provision "shell", path: "bentoml/install.sh"
  end

end

# -*- mode: ruby -*-
# vi: set ft=ruby :
$out_file = File.new('debug.log', 'w')
def $stdout.write string
    log_datas=string
    if log_datas.gsub(/\r?\n/, "") != ''
        log_datas=::Time.now.strftime("%d/%m/%Y %T")+" "+log_datas.gsub(/\r\n/, "\n")
    end
    super log_datas
    $out_file.write log_datas
    $out_file.flush
end
def $stderr.write string
    log_datas=string
    if log_datas.gsub(/\r?\n/, "") != ''
        log_datas=::Time.now.strftime("%d/%m/%Y %T")+" "+log_datas.gsub(/\r\n/, "\n")
    end
    super log_datas
    $out_file.write log_datas
    $out_file.flush
end

# Dataset temperaturas o dataset 6G Manufacturing
# Si la idea es usar P4, Poner manufacturing_6G pues es el Ãºnico que soporta
dataset = "manufacturing_6G" # Temperatura = "iiot-temp" // 6G Manufacturing = "manufacturing_6G"

Vagrant.configure("2") do |config|

  # Habilitar el x11
  config.ssh.forward_agent = true
  config.ssh.forward_x11 = true

  # Define las configuraciones para FactoryFloor
  config.vm.define "FactoryFloor" do |factory_config|
    factory_config.vm.box = "ubuntu/focal64"
    factory_config.vm.hostname = 'factory'
    factory_config.vm.network "private_network", ip: "192.168.56.11"
    factory_config.vm.provider "virtualbox" do |vb|
      vb.memory = 4096 # 2GB de RAM
      vb.cpus = 3      # 2 cores
      vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
    end
    # Ejecutar el script mininet-wifi/install.sh en FactoryFloor
    factory_config.vm.provision "shell", path: "mininet-wifi/install.sh"
    factory_config.vm.provision "file", source: "mininet-wifi/topo.py", destination: "/home/vagrant/topo.py"
    factory_config.vm.provision "shell", path: "iiot_sensor/install.sh"
    if dataset == "iiot-temp"
      factory_config.vm.provision "file", source: "iiot_sensor/iiot_sensor.py", destination: "/home/vagrant/iiot_sensor.py"
    elsif dataset == "manufacturing_6G"
      factory_config.vm.provision "file", source: "iiot_sensor/iiot_sensor_manufacturing6g.py", destination: "/home/vagrant/iiot_sensor.py"
    else
      s.inline = "echo 'No se ha definido correctamente el dataset que se va a usar"
    end
    factory_config.vm.provision "shell", path: "P4/Factory/install_mnwifi.sh"
    factory_config.vm.provision "file", source: "P4/Factory/p4topo.py", destination: "/home/vagrant/p4topo.py"
    factory_config.vm.provision "file", source: "P4/Factory/basic.json", destination: "/home/vagrant/basic.json"
    factory_config.vm.provision "file", source: "P4/Factory/p4runtime", destination: "/home/vagrant/p4runtime"
  end

  # Define las configuraciones para Edge
  config.vm.define "Edge" do |edge_config|
    edge_config.vm.box = "ubuntu/focal64"
    edge_config.vm.hostname = 'edge'
    edge_config.vm.network "private_network", ip: "192.168.56.12"
    edge_config.vm.provider "virtualbox" do |vb|
      vb.memory = 2048 # 2GB de RAM
      vb.cpus = 2      # 2 cores
      vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
    end
    # Ejecutar el script ryu/install.sh en Edge y el de InfluxDB
    edge_config.vm.provision "shell", path: "ryu/install.sh"
    edge_config.vm.provision "shell", path: "influxdb/install.sh"
    edge_config.vm.provision "shell", path: "influxdb/config.sh"
    if dataset == "iiot-temp"
      edge_config.vm.provision "file", source: "ryu/simple_switch_modificado.py", destination: "/home/vagrant/simple_switch_modificado.py"
    elsif dataset == "manufacturing_6G"
      edge_config.vm.provision "file", source: "ryu/simple_switch_modificado_manufacturing6g.py", destination: "/home/vagrant/simple_switch_modificado.py"
    else
      s.inline = "echo 'No se ha definido correctamente el dataset que se va a usar"
    end
    edge_config.vm.provision "shell", inline: "mkdir /home/vagrant/p4controllerd /home/vagrant/p4utils"
    edge_config.vm.provision "shell", path: "P4/Edge/install_controller.sh"
    edge_config.vm.provision "file", source: "P4/Edge/topop4controller.py", destination: "/home/vagrant/topop4controller.py"
    edge_config.vm.provision "file", source: "P4/Edge/basic.p4", destination: "/home/vagrant/basic.p4"
    edge_config.vm.provision "file", source: "P4/Edge/Makefile_utils", destination: "/home/vagrant/Makefile_utils"
    edge_config.vm.provision "file", source: "P4/Edge/Makefile_controller", destination: "/home/vagrant/Makefile_controller"
    edge_config.vm.provision "shell", inline: "mv /home/vagrant/topop4controller.py /home/vagrant/p4controllerd/topop4controller.py"
    edge_config.vm.provision "shell", inline: "mv /home/vagrant/basic.p4 /home/vagrant/p4controllerd/basic.p4"
    edge_config.vm.provision "shell", inline: "mv /home/vagrant/Makefile_utils /home/vagrant/p4utils/Makefile"
    edge_config.vm.provision "shell", inline: "mv /home/vagrant/Makefile_controller /home/vagrant/p4controllerd/Makefile"
  end

  # Define las configuraciones para Cloud
  config.vm.define "Cloud" do |cloud_config|
    cloud_config.vm.box = "ubuntu/focal64"
    cloud_config.vm.hostname = 'cloud'
    cloud_config.vm.network "private_network", ip: "192.168.56.13"
    cloud_config.vm.provider "virtualbox" do |vb|
      vb.memory = 2048 # 2GB de RAM
      vb.cpus = 2      # 2 cores
      vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
    end
    # Ejecutar el script grafana/install.sh en Cloud y el de BentoML
    cloud_config.vm.provision "file", source: "grafana/influxdb_datasource.yaml", destination: "/home/vagrant/grafana/influxdb_datasource.yaml"
    cloud_config.vm.provision "file", source: "grafana/influxdb_dashboard.yaml", destination: "/home/vagrant/grafana/influxdb_dashboard.yaml"
    cloud_config.vm.provision "file", source: "grafana/dashboard.json", destination: "/home/vagrant/grafana/dashboard.json"
    cloud_config.vm.provision "file", source: "grafana/dashboard_6g.json", destination: "/home/vagrant/grafana/dashboard_6g.json"
    cloud_config.vm.provision "shell", path: "grafana/install.sh"
    # BentoML
    if dataset == "iiot-temp"
      cloud_config.vm.provision "file", source: "bentoml/service.py", destination: "/home/vagrant/service.py"
      cloud_config.vm.provision "file", source: "bentoml/train.py", destination: "/home/vagrant/train.py"
      cloud_config.vm.provision "file", source: "bentoml/dataset/IIOT-temp-warn-max.csv", destination: "/home/vagrant/dataset/IIOT-temp-warn-max.csv"
    elsif dataset == "manufacturing_6G"
      cloud_config.vm.provision "file", source: "bentoml/manufacturing6gmodel/service6gdataset.py", destination: "/home/vagrant/service.py"
      cloud_config.vm.provision "file", source: "bentoml/manufacturing6gmodel/train6gdataset.py", destination: "/home/vagrant/train.py"
      cloud_config.vm.provision "file", source: "bentoml/dataset/manufacturing_6G_dataset.csv", destination: "/home/vagrant/dataset/manufacturing_6G_dataset.csv"
    else
      s.inline = "echo 'No se ha definido correctamente el dataset que se va a usar"
    end
    cloud_config.vm.provision "file", source: "bentoml/requirements.txt", destination: "/home/vagrant/requirements.txt"
    cloud_config.vm.provision "file", source: "bentoml/bentofile.yaml", destination: "/home/vagrant/bentofile.yaml"
    # Install.sh
    cloud_config.vm.provision "shell", path: "bentoml/install.sh"
  end

end
